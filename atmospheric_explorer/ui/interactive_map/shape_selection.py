"""\
Module to manage selections done on the folium map.
"""
from __future__ import annotations

import geopandas as gpd
import streamlit as st
from shapely.geometry import shape
from shapely.ops import unary_union

from atmospheric_explorer.loggers import get_logger
from atmospheric_explorer.shapefile import ShapefilesDownloader

logger = get_logger("atmexp")


map_level_column_mapping = {
    "Continents": "CONTINENT",
    "Administrative entities": "ADMIN",
    "Countries": "GEOUNIT",
    "Countries with subunits": "SUBUNIT",
}


class ShapeSelection:
    """Class to manage different possible selection on the interactive map."""

    _crs = "EPSG:4326"

    def __init__(
        self, dataframe: gpd.GeoDataFrame, is_entity: bool, level: str | None = None
    ):
        self.level = level
        self.dataframe = dataframe
        self.is_entity_poly = is_entity

    def __repr__(self) -> str:
        return repr(self.dataframe)

    def __eq__(self, other: ShapeSelection) -> bool:
        return self.dataframe.equals(other.dataframe)

    @property
    def labels(self) -> list[str]:
        """Selection labels, useful when countries are selected."""
        return self.dataframe["label"].unique()

    @staticmethod
    @st.cache_data(show_spinner="Fetching shapefile...")
    def shapefile_dataframe(level: str) -> gpd.GeoDataFrame:
        """Get and cache the shapefile"""
        col = map_level_column_mapping[level]
        sh_df = ShapefilesDownloader(instance="map_subunits")
        sh_df = sh_df.get_as_dataframe()[[col, "geometry"]].rename(
            {col: "label"}, axis=1
        )
        return sh_df.dissolve(by="label").reset_index()

    @staticmethod
    def get_event_label(out_event) -> str | None:
        """Get label from folium map click event"""
        if out_event.get("last_active_drawing") is not None:
            if out_event["last_active_drawing"].get("properties") is not None:
                return out_event["last_active_drawing"]["properties"].get("label")
        return None

    @classmethod
    def from_out_event(cls, out_event) -> ShapeSelection:
        """Generate a ShapeSelection object from an output event generated by streamlit_folium."""
        admin = cls.get_event_label(out_event)
        return cls(
            dataframe=gpd.GeoDataFrame(
                {
                    "label": [admin] if admin is not None else ["generic shape"],
                    "geometry": [shape(out_event["last_active_drawing"]["geometry"])],
                },
                crs=cls._crs,
            ),
            is_entity=(admin is not None),
        )

    @classmethod
    def from_entities_list(cls, entities: list[str], level: str) -> ShapeSelection:
        """Generate a ShapeSelection object from a list of entities, shapes are taken from the shapefile."""
        sh_df = cls.shapefile_dataframe(level)
        sh_df = sh_df[sh_df["label"].isin(entities)]
        return cls(dataframe=sh_df, is_entity=True, level=level)

    @classmethod
    def entities_from_generic_shape(
        cls, shape_selection: ShapeSelection, level: str
    ) -> ShapeSelection:
        """\
        Generate a ShapeSelection object encompassing entitities that are touched by the shape_selection objects passed.
        It assumes the shape_selection argument is a generic shape.
        """
        shapefile = cls.shapefile_dataframe(level)
        selected_geometry = unary_union(shape_selection.dataframe["geometry"])
        return cls(
            dataframe=(
                shapefile[
                    ~selected_geometry.intersection(shapefile["geometry"]).is_empty
                ].reset_index(drop=True)
            ),
            is_entity=True,
        )

    @classmethod
    def convert_selection(
        cls, shape_selection: ShapeSelection, level: str | None = None
    ) -> ShapeSelection:
        """Converts selections between levels and types (shape vs entity)."""
        if level is None:
            return cls(dataframe=shape_selection.dataframe, is_entity=False, level=None)
        if shape_selection.is_entity_poly:
            if level == shape_selection.level:
                return shape_selection
            col_from = map_level_column_mapping[shape_selection.level]
            col_to = map_level_column_mapping[level]
            sh_df = ShapefilesDownloader(instance="map_subunits").get_as_dataframe()[
                [col_from, col_to]
            ]
            sh_df = sh_df.merge(
                shape_selection.dataframe,
                how="inner",
                left_on=col_from,
                right_on="label",
            )
            return cls.from_entities_list(sh_df[col_to].unique(), level)
        return cls.entities_from_generic_shape(shape_selection, level)
